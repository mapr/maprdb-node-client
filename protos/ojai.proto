/*eslint-disable block-scoped-var, no-redeclare, no-control-regex, no-prototype-builtins*/
"use strict";

var $protobuf = require("protobufjs/minimal");

// Common aliases
var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;

// Exported root namespace
var $root = $protobuf.roots["default"] || ($protobuf.roots["default"] = {});

$root.com = (function() {

    /**
     * Namespace com.
     * @exports com
     * @namespace
     */
    var com = {};

    com.mapr = (function() {

        /**
         * Namespace mapr.
         * @memberof com
         * @namespace
         */
        var mapr = {};

        mapr.maprdb = (function() {

            /**
             * Namespace maprdb.
             * @memberof com.mapr
             * @namespace
             */
            var maprdb = {};

            maprdb.grpc = (function() {

                /**
                 * Namespace grpc.
                 * @memberof com.mapr.maprdb
                 * @namespace
                 */
                var grpc = {};

                /**
                 * ErrorCode enum.
                 * @name com.mapr.maprdb.grpc.ErrorCode
                 * @enum {string}
                 * @property {number} NO_ERROR=0 NO_ERROR value
                 * @property {number} UNKNOWN_PAYLOAD_ENCODING=1 UNKNOWN_PAYLOAD_ENCODING value
                 * @property {number} CLUSTER_NOT_FOUND=2 CLUSTER_NOT_FOUND value
                 * @property {number} PATH_NOT_FOUND=3 PATH_NOT_FOUND value
                 * @property {number} TABLE_NOT_FOUND=4 TABLE_NOT_FOUND value
                 * @property {number} ENCODING_ERROR=5 ENCODING_ERROR value
                 * @property {number} DECODING_ERROR=6 DECODING_ERROR value
                 */
                grpc.ErrorCode = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "NO_ERROR"] = 0;
                    values[valuesById[1] = "UNKNOWN_PAYLOAD_ENCODING"] = 1;
                    values[valuesById[2] = "CLUSTER_NOT_FOUND"] = 2;
                    values[valuesById[3] = "PATH_NOT_FOUND"] = 3;
                    values[valuesById[4] = "TABLE_NOT_FOUND"] = 4;
                    values[valuesById[5] = "ENCODING_ERROR"] = 5;
                    values[valuesById[6] = "DECODING_ERROR"] = 6;
                    return values;
                })();

                /**
                 * PayloadEncoding enum.
                 * @name com.mapr.maprdb.grpc.PayloadEncoding
                 * @enum {string}
                 * @property {number} JSON_ENCODING=0 JSON_ENCODING value
                 */
                grpc.PayloadEncoding = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "JSON_ENCODING"] = 0;
                    return values;
                })();

                grpc.MapRDbServer = (function() {

                    /**
                     * Constructs a new MapRDbServer service.
                     * @memberof com.mapr.maprdb.grpc
                     * @classdesc Represents a MapRDbServer
                     * @extends $protobuf.rpc.Service
                     * @constructor
                     * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                     * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                     * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                     */
                    function MapRDbServer(rpcImpl, requestDelimited, responseDelimited) {
                        $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                    }

                    (MapRDbServer.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = MapRDbServer;

                    /**
                     * Creates new MapRDbServer service using the specified rpc implementation.
                     * @function create
                     * @memberof com.mapr.maprdb.grpc.MapRDbServer
                     * @static
                     * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                     * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                     * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                     * @returns {MapRDbServer} RPC service. Useful where requests and/or responses are streamed.
                     */
                    MapRDbServer.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                        return new this(rpcImpl, requestDelimited, responseDelimited);
                    };

                    /**
                     * Callback as used by {@link com.mapr.maprdb.grpc.MapRDbServer#insertOrReplace}.
                     * @memberof com.mapr.maprdb.grpc.MapRDbServer
                     * @typedef InsertOrReplaceCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {com.mapr.maprdb.grpc.InsertOrReplaceResponse} [response] InsertOrReplaceResponse
                     */

                    /**
                     * Calls InsertOrReplace.
                     * @function insertOrReplace
                     * @memberof com.mapr.maprdb.grpc.MapRDbServer
                     * @instance
                     * @param {com.mapr.maprdb.grpc.IInsertOrReplaceRequest} request InsertOrReplaceRequest message or plain object
                     * @param {com.mapr.maprdb.grpc.MapRDbServer.InsertOrReplaceCallback} callback Node-style callback called with the error, if any, and InsertOrReplaceResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    MapRDbServer.prototype.insertOrReplace = function insertOrReplace(request, callback) {
                        return this.rpcCall(insertOrReplace, $root.com.mapr.maprdb.grpc.InsertOrReplaceRequest, $root.com.mapr.maprdb.grpc.InsertOrReplaceResponse, request, callback);
                    };

                    /**
                     * Calls InsertOrReplace.
                     * @function insertOrReplace
                     * @memberof com.mapr.maprdb.grpc.MapRDbServer
                     * @instance
                     * @param {com.mapr.maprdb.grpc.IInsertOrReplaceRequest} request InsertOrReplaceRequest message or plain object
                     * @returns {Promise<com.mapr.maprdb.grpc.InsertOrReplaceResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link com.mapr.maprdb.grpc.MapRDbServer#createTable}.
                     * @memberof com.mapr.maprdb.grpc.MapRDbServer
                     * @typedef CreateTableCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {com.mapr.maprdb.grpc.CreateTableResponse} [response] CreateTableResponse
                     */

                    /**
                     * Calls CreateTable.
                     * @function createTable
                     * @memberof com.mapr.maprdb.grpc.MapRDbServer
                     * @instance
                     * @param {com.mapr.maprdb.grpc.ICreateTableRequest} request CreateTableRequest message or plain object
                     * @param {com.mapr.maprdb.grpc.MapRDbServer.CreateTableCallback} callback Node-style callback called with the error, if any, and CreateTableResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    MapRDbServer.prototype.createTable = function createTable(request, callback) {
                        return this.rpcCall(createTable, $root.com.mapr.maprdb.grpc.CreateTableRequest, $root.com.mapr.maprdb.grpc.CreateTableResponse, request, callback);
                    };

                    /**
                     * Calls CreateTable.
                     * @function createTable
                     * @memberof com.mapr.maprdb.grpc.MapRDbServer
                     * @instance
                     * @param {com.mapr.maprdb.grpc.ICreateTableRequest} request CreateTableRequest message or plain object
                     * @returns {Promise<com.mapr.maprdb.grpc.CreateTableResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link com.mapr.maprdb.grpc.MapRDbServer#deleteTable}.
                     * @memberof com.mapr.maprdb.grpc.MapRDbServer
                     * @typedef DeleteTableCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {com.mapr.maprdb.grpc.DeleteTableResponse} [response] DeleteTableResponse
                     */

                    /**
                     * Calls DeleteTable.
                     * @function deleteTable
                     * @memberof com.mapr.maprdb.grpc.MapRDbServer
                     * @instance
                     * @param {com.mapr.maprdb.grpc.IDeleteTableRequest} request DeleteTableRequest message or plain object
                     * @param {com.mapr.maprdb.grpc.MapRDbServer.DeleteTableCallback} callback Node-style callback called with the error, if any, and DeleteTableResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    MapRDbServer.prototype.deleteTable = function deleteTable(request, callback) {
                        return this.rpcCall(deleteTable, $root.com.mapr.maprdb.grpc.DeleteTableRequest, $root.com.mapr.maprdb.grpc.DeleteTableResponse, request, callback);
                    };

                    /**
                     * Calls DeleteTable.
                     * @function deleteTable
                     * @memberof com.mapr.maprdb.grpc.MapRDbServer
                     * @instance
                     * @param {com.mapr.maprdb.grpc.IDeleteTableRequest} request DeleteTableRequest message or plain object
                     * @returns {Promise<com.mapr.maprdb.grpc.DeleteTableResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link com.mapr.maprdb.grpc.MapRDbServer#tableExists}.
                     * @memberof com.mapr.maprdb.grpc.MapRDbServer
                     * @typedef TableExistsCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {com.mapr.maprdb.grpc.TableExistsResponse} [response] TableExistsResponse
                     */

                    /**
                     * Calls TableExists.
                     * @function tableExists
                     * @memberof com.mapr.maprdb.grpc.MapRDbServer
                     * @instance
                     * @param {com.mapr.maprdb.grpc.ITableExistsRequest} request TableExistsRequest message or plain object
                     * @param {com.mapr.maprdb.grpc.MapRDbServer.TableExistsCallback} callback Node-style callback called with the error, if any, and TableExistsResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    MapRDbServer.prototype.tableExists = function tableExists(request, callback) {
                        return this.rpcCall(tableExists, $root.com.mapr.maprdb.grpc.TableExistsRequest, $root.com.mapr.maprdb.grpc.TableExistsResponse, request, callback);
                    };

                    /**
                     * Calls TableExists.
                     * @function tableExists
                     * @memberof com.mapr.maprdb.grpc.MapRDbServer
                     * @instance
                     * @param {com.mapr.maprdb.grpc.ITableExistsRequest} request TableExistsRequest message or plain object
                     * @returns {Promise<com.mapr.maprdb.grpc.TableExistsResponse>} Promise
                     * @variation 2
                     */

                    return MapRDbServer;
                })();

                grpc.RpcError = (function() {

                    /**
                     * Properties of a RpcError.
                     * @memberof com.mapr.maprdb.grpc
                     * @interface IRpcError
                     * @property {com.mapr.maprdb.grpc.ErrorCode|null} [err] RpcError err
                     * @property {string|null} [errorDescription] RpcError errorDescription
                     */

                    /**
                     * Constructs a new RpcError.
                     * @memberof com.mapr.maprdb.grpc
                     * @classdesc Represents a RpcError.
                     * @implements IRpcError
                     * @constructor
                     * @param {com.mapr.maprdb.grpc.IRpcError=} [properties] Properties to set
                     */
                    function RpcError(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * RpcError err.
                     * @member {com.mapr.maprdb.grpc.ErrorCode} err
                     * @memberof com.mapr.maprdb.grpc.RpcError
                     * @instance
                     */
                    RpcError.prototype.err = 0;

                    /**
                     * RpcError errorDescription.
                     * @member {string} errorDescription
                     * @memberof com.mapr.maprdb.grpc.RpcError
                     * @instance
                     */
                    RpcError.prototype.errorDescription = "";

                    /**
                     * Creates a new RpcError instance using the specified properties.
                     * @function create
                     * @memberof com.mapr.maprdb.grpc.RpcError
                     * @static
                     * @param {com.mapr.maprdb.grpc.IRpcError=} [properties] Properties to set
                     * @returns {com.mapr.maprdb.grpc.RpcError} RpcError instance
                     */
                    RpcError.create = function create(properties) {
                        return new RpcError(properties);
                    };

                    /**
                     * Encodes the specified RpcError message. Does not implicitly {@link com.mapr.maprdb.grpc.RpcError.verify|verify} messages.
                     * @function encode
                     * @memberof com.mapr.maprdb.grpc.RpcError
                     * @static
                     * @param {com.mapr.maprdb.grpc.IRpcError} message RpcError message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    RpcError.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.err != null && message.hasOwnProperty("err"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.err);
                        if (message.errorDescription != null && message.hasOwnProperty("errorDescription"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.errorDescription);
                        return writer;
                    };

                    /**
                     * Encodes the specified RpcError message, length delimited. Does not implicitly {@link com.mapr.maprdb.grpc.RpcError.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof com.mapr.maprdb.grpc.RpcError
                     * @static
                     * @param {com.mapr.maprdb.grpc.IRpcError} message RpcError message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    RpcError.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a RpcError message from the specified reader or buffer.
                     * @function decode
                     * @memberof com.mapr.maprdb.grpc.RpcError
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {com.mapr.maprdb.grpc.RpcError} RpcError
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    RpcError.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.mapr.maprdb.grpc.RpcError();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.err = reader.int32();
                                break;
                            case 2:
                                message.errorDescription = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a RpcError message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof com.mapr.maprdb.grpc.RpcError
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {com.mapr.maprdb.grpc.RpcError} RpcError
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    RpcError.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a RpcError message.
                     * @function verify
                     * @memberof com.mapr.maprdb.grpc.RpcError
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    RpcError.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.err != null && message.hasOwnProperty("err"))
                            switch (message.err) {
                            default:
                                return "err: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                            case 4:
                            case 5:
                            case 6:
                                break;
                            }
                        if (message.errorDescription != null && message.hasOwnProperty("errorDescription"))
                            if (!$util.isString(message.errorDescription))
                                return "errorDescription: string expected";
                        return null;
                    };

                    /**
                     * Creates a RpcError message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof com.mapr.maprdb.grpc.RpcError
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {com.mapr.maprdb.grpc.RpcError} RpcError
                     */
                    RpcError.fromObject = function fromObject(object) {
                        if (object instanceof $root.com.mapr.maprdb.grpc.RpcError)
                            return object;
                        var message = new $root.com.mapr.maprdb.grpc.RpcError();
                        switch (object.err) {
                        case "NO_ERROR":
                        case 0:
                            message.err = 0;
                            break;
                        case "UNKNOWN_PAYLOAD_ENCODING":
                        case 1:
                            message.err = 1;
                            break;
                        case "CLUSTER_NOT_FOUND":
                        case 2:
                            message.err = 2;
                            break;
                        case "PATH_NOT_FOUND":
                        case 3:
                            message.err = 3;
                            break;
                        case "TABLE_NOT_FOUND":
                        case 4:
                            message.err = 4;
                            break;
                        case "ENCODING_ERROR":
                        case 5:
                            message.err = 5;
                            break;
                        case "DECODING_ERROR":
                        case 6:
                            message.err = 6;
                            break;
                        }
                        if (object.errorDescription != null)
                            message.errorDescription = String(object.errorDescription);
                        return message;
                    };

                    /**
                     * Creates a plain object from a RpcError message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof com.mapr.maprdb.grpc.RpcError
                     * @static
                     * @param {com.mapr.maprdb.grpc.RpcError} message RpcError
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    RpcError.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.err = options.enums === String ? "NO_ERROR" : 0;
                            object.errorDescription = "";
                        }
                        if (message.err != null && message.hasOwnProperty("err"))
                            object.err = options.enums === String ? $root.com.mapr.maprdb.grpc.ErrorCode[message.err] : message.err;
                        if (message.errorDescription != null && message.hasOwnProperty("errorDescription"))
                            object.errorDescription = message.errorDescription;
                        return object;
                    };

                    /**
                     * Converts this RpcError to JSON.
                     * @function toJSON
                     * @memberof com.mapr.maprdb.grpc.RpcError
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    RpcError.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return RpcError;
                })();

                grpc.InsertOrReplaceRequest = (function() {

                    /**
                     * Properties of an InsertOrReplaceRequest.
                     * @memberof com.mapr.maprdb.grpc
                     * @interface IInsertOrReplaceRequest
                     * @property {string|null} [tablePath] InsertOrReplaceRequest tablePath
                     * @property {com.mapr.maprdb.grpc.PayloadEncoding|null} [payloadEncoding] InsertOrReplaceRequest payloadEncoding
                     * @property {string|null} [jsonPayload] InsertOrReplaceRequest jsonPayload
                     */

                    /**
                     * Constructs a new InsertOrReplaceRequest.
                     * @memberof com.mapr.maprdb.grpc
                     * @classdesc Represents an InsertOrReplaceRequest.
                     * @implements IInsertOrReplaceRequest
                     * @constructor
                     * @param {com.mapr.maprdb.grpc.IInsertOrReplaceRequest=} [properties] Properties to set
                     */
                    function InsertOrReplaceRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * InsertOrReplaceRequest tablePath.
                     * @member {string} tablePath
                     * @memberof com.mapr.maprdb.grpc.InsertOrReplaceRequest
                     * @instance
                     */
                    InsertOrReplaceRequest.prototype.tablePath = "";

                    /**
                     * InsertOrReplaceRequest payloadEncoding.
                     * @member {com.mapr.maprdb.grpc.PayloadEncoding} payloadEncoding
                     * @memberof com.mapr.maprdb.grpc.InsertOrReplaceRequest
                     * @instance
                     */
                    InsertOrReplaceRequest.prototype.payloadEncoding = 0;

                    /**
                     * InsertOrReplaceRequest jsonPayload.
                     * @member {string} jsonPayload
                     * @memberof com.mapr.maprdb.grpc.InsertOrReplaceRequest
                     * @instance
                     */
                    InsertOrReplaceRequest.prototype.jsonPayload = "";

                    /**
                     * Creates a new InsertOrReplaceRequest instance using the specified properties.
                     * @function create
                     * @memberof com.mapr.maprdb.grpc.InsertOrReplaceRequest
                     * @static
                     * @param {com.mapr.maprdb.grpc.IInsertOrReplaceRequest=} [properties] Properties to set
                     * @returns {com.mapr.maprdb.grpc.InsertOrReplaceRequest} InsertOrReplaceRequest instance
                     */
                    InsertOrReplaceRequest.create = function create(properties) {
                        return new InsertOrReplaceRequest(properties);
                    };

                    /**
                     * Encodes the specified InsertOrReplaceRequest message. Does not implicitly {@link com.mapr.maprdb.grpc.InsertOrReplaceRequest.verify|verify} messages.
                     * @function encode
                     * @memberof com.mapr.maprdb.grpc.InsertOrReplaceRequest
                     * @static
                     * @param {com.mapr.maprdb.grpc.IInsertOrReplaceRequest} message InsertOrReplaceRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    InsertOrReplaceRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.tablePath != null && message.hasOwnProperty("tablePath"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.tablePath);
                        if (message.payloadEncoding != null && message.hasOwnProperty("payloadEncoding"))
                            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.payloadEncoding);
                        if (message.jsonPayload != null && message.hasOwnProperty("jsonPayload"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.jsonPayload);
                        return writer;
                    };

                    /**
                     * Encodes the specified InsertOrReplaceRequest message, length delimited. Does not implicitly {@link com.mapr.maprdb.grpc.InsertOrReplaceRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof com.mapr.maprdb.grpc.InsertOrReplaceRequest
                     * @static
                     * @param {com.mapr.maprdb.grpc.IInsertOrReplaceRequest} message InsertOrReplaceRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    InsertOrReplaceRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes an InsertOrReplaceRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof com.mapr.maprdb.grpc.InsertOrReplaceRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {com.mapr.maprdb.grpc.InsertOrReplaceRequest} InsertOrReplaceRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    InsertOrReplaceRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.mapr.maprdb.grpc.InsertOrReplaceRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.tablePath = reader.string();
                                break;
                            case 3:
                                message.payloadEncoding = reader.int32();
                                break;
                            case 4:
                                message.jsonPayload = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes an InsertOrReplaceRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof com.mapr.maprdb.grpc.InsertOrReplaceRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {com.mapr.maprdb.grpc.InsertOrReplaceRequest} InsertOrReplaceRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    InsertOrReplaceRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies an InsertOrReplaceRequest message.
                     * @function verify
                     * @memberof com.mapr.maprdb.grpc.InsertOrReplaceRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    InsertOrReplaceRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.tablePath != null && message.hasOwnProperty("tablePath"))
                            if (!$util.isString(message.tablePath))
                                return "tablePath: string expected";
                        if (message.payloadEncoding != null && message.hasOwnProperty("payloadEncoding"))
                            switch (message.payloadEncoding) {
                            default:
                                return "payloadEncoding: enum value expected";
                            case 0:
                                break;
                            }
                        if (message.jsonPayload != null && message.hasOwnProperty("jsonPayload"))
                            if (!$util.isString(message.jsonPayload))
                                return "jsonPayload: string expected";
                        return null;
                    };

                    /**
                     * Creates an InsertOrReplaceRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof com.mapr.maprdb.grpc.InsertOrReplaceRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {com.mapr.maprdb.grpc.InsertOrReplaceRequest} InsertOrReplaceRequest
                     */
                    InsertOrReplaceRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.com.mapr.maprdb.grpc.InsertOrReplaceRequest)
                            return object;
                        var message = new $root.com.mapr.maprdb.grpc.InsertOrReplaceRequest();
                        if (object.tablePath != null)
                            message.tablePath = String(object.tablePath);
                        switch (object.payloadEncoding) {
                        case "JSON_ENCODING":
                        case 0:
                            message.payloadEncoding = 0;
                            break;
                        }
                        if (object.jsonPayload != null)
                            message.jsonPayload = String(object.jsonPayload);
                        return message;
                    };

                    /**
                     * Creates a plain object from an InsertOrReplaceRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof com.mapr.maprdb.grpc.InsertOrReplaceRequest
                     * @static
                     * @param {com.mapr.maprdb.grpc.InsertOrReplaceRequest} message InsertOrReplaceRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    InsertOrReplaceRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.tablePath = "";
                            object.payloadEncoding = options.enums === String ? "JSON_ENCODING" : 0;
                            object.jsonPayload = "";
                        }
                        if (message.tablePath != null && message.hasOwnProperty("tablePath"))
                            object.tablePath = message.tablePath;
                        if (message.payloadEncoding != null && message.hasOwnProperty("payloadEncoding"))
                            object.payloadEncoding = options.enums === String ? $root.com.mapr.maprdb.grpc.PayloadEncoding[message.payloadEncoding] : message.payloadEncoding;
                        if (message.jsonPayload != null && message.hasOwnProperty("jsonPayload"))
                            object.jsonPayload = message.jsonPayload;
                        return object;
                    };

                    /**
                     * Converts this InsertOrReplaceRequest to JSON.
                     * @function toJSON
                     * @memberof com.mapr.maprdb.grpc.InsertOrReplaceRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    InsertOrReplaceRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return InsertOrReplaceRequest;
                })();

                grpc.InsertOrReplaceResponse = (function() {

                    /**
                     * Properties of an InsertOrReplaceResponse.
                     * @memberof com.mapr.maprdb.grpc
                     * @interface IInsertOrReplaceResponse
                     * @property {com.mapr.maprdb.grpc.IRpcError|null} [error] InsertOrReplaceResponse error
                     * @property {com.mapr.maprdb.grpc.PayloadEncoding|null} [payloadEncoding] InsertOrReplaceResponse payloadEncoding
                     * @property {string|null} [jsonPayload] InsertOrReplaceResponse jsonPayload
                     */

                    /**
                     * Constructs a new InsertOrReplaceResponse.
                     * @memberof com.mapr.maprdb.grpc
                     * @classdesc Represents an InsertOrReplaceResponse.
                     * @implements IInsertOrReplaceResponse
                     * @constructor
                     * @param {com.mapr.maprdb.grpc.IInsertOrReplaceResponse=} [properties] Properties to set
                     */
                    function InsertOrReplaceResponse(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * InsertOrReplaceResponse error.
                     * @member {com.mapr.maprdb.grpc.IRpcError|null|undefined} error
                     * @memberof com.mapr.maprdb.grpc.InsertOrReplaceResponse
                     * @instance
                     */
                    InsertOrReplaceResponse.prototype.error = null;

                    /**
                     * InsertOrReplaceResponse payloadEncoding.
                     * @member {com.mapr.maprdb.grpc.PayloadEncoding} payloadEncoding
                     * @memberof com.mapr.maprdb.grpc.InsertOrReplaceResponse
                     * @instance
                     */
                    InsertOrReplaceResponse.prototype.payloadEncoding = 0;

                    /**
                     * InsertOrReplaceResponse jsonPayload.
                     * @member {string} jsonPayload
                     * @memberof com.mapr.maprdb.grpc.InsertOrReplaceResponse
                     * @instance
                     */
                    InsertOrReplaceResponse.prototype.jsonPayload = "";

                    /**
                     * Creates a new InsertOrReplaceResponse instance using the specified properties.
                     * @function create
                     * @memberof com.mapr.maprdb.grpc.InsertOrReplaceResponse
                     * @static
                     * @param {com.mapr.maprdb.grpc.IInsertOrReplaceResponse=} [properties] Properties to set
                     * @returns {com.mapr.maprdb.grpc.InsertOrReplaceResponse} InsertOrReplaceResponse instance
                     */
                    InsertOrReplaceResponse.create = function create(properties) {
                        return new InsertOrReplaceResponse(properties);
                    };

                    /**
                     * Encodes the specified InsertOrReplaceResponse message. Does not implicitly {@link com.mapr.maprdb.grpc.InsertOrReplaceResponse.verify|verify} messages.
                     * @function encode
                     * @memberof com.mapr.maprdb.grpc.InsertOrReplaceResponse
                     * @static
                     * @param {com.mapr.maprdb.grpc.IInsertOrReplaceResponse} message InsertOrReplaceResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    InsertOrReplaceResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.error != null && message.hasOwnProperty("error"))
                            $root.com.mapr.maprdb.grpc.RpcError.encode(message.error, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.payloadEncoding != null && message.hasOwnProperty("payloadEncoding"))
                            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.payloadEncoding);
                        if (message.jsonPayload != null && message.hasOwnProperty("jsonPayload"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.jsonPayload);
                        return writer;
                    };

                    /**
                     * Encodes the specified InsertOrReplaceResponse message, length delimited. Does not implicitly {@link com.mapr.maprdb.grpc.InsertOrReplaceResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof com.mapr.maprdb.grpc.InsertOrReplaceResponse
                     * @static
                     * @param {com.mapr.maprdb.grpc.IInsertOrReplaceResponse} message InsertOrReplaceResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    InsertOrReplaceResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes an InsertOrReplaceResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof com.mapr.maprdb.grpc.InsertOrReplaceResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {com.mapr.maprdb.grpc.InsertOrReplaceResponse} InsertOrReplaceResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    InsertOrReplaceResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.mapr.maprdb.grpc.InsertOrReplaceResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.error = $root.com.mapr.maprdb.grpc.RpcError.decode(reader, reader.uint32());
                                break;
                            case 3:
                                message.payloadEncoding = reader.int32();
                                break;
                            case 4:
                                message.jsonPayload = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes an InsertOrReplaceResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof com.mapr.maprdb.grpc.InsertOrReplaceResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {com.mapr.maprdb.grpc.InsertOrReplaceResponse} InsertOrReplaceResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    InsertOrReplaceResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies an InsertOrReplaceResponse message.
                     * @function verify
                     * @memberof com.mapr.maprdb.grpc.InsertOrReplaceResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    InsertOrReplaceResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.error != null && message.hasOwnProperty("error")) {
                            var error = $root.com.mapr.maprdb.grpc.RpcError.verify(message.error);
                            if (error)
                                return "error." + error;
                        }
                        if (message.payloadEncoding != null && message.hasOwnProperty("payloadEncoding"))
                            switch (message.payloadEncoding) {
                            default:
                                return "payloadEncoding: enum value expected";
                            case 0:
                                break;
                            }
                        if (message.jsonPayload != null && message.hasOwnProperty("jsonPayload"))
                            if (!$util.isString(message.jsonPayload))
                                return "jsonPayload: string expected";
                        return null;
                    };

                    /**
                     * Creates an InsertOrReplaceResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof com.mapr.maprdb.grpc.InsertOrReplaceResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {com.mapr.maprdb.grpc.InsertOrReplaceResponse} InsertOrReplaceResponse
                     */
                    InsertOrReplaceResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.com.mapr.maprdb.grpc.InsertOrReplaceResponse)
                            return object;
                        var message = new $root.com.mapr.maprdb.grpc.InsertOrReplaceResponse();
                        if (object.error != null) {
                            if (typeof object.error !== "object")
                                throw TypeError(".com.mapr.maprdb.grpc.InsertOrReplaceResponse.error: object expected");
                            message.error = $root.com.mapr.maprdb.grpc.RpcError.fromObject(object.error);
                        }
                        switch (object.payloadEncoding) {
                        case "JSON_ENCODING":
                        case 0:
                            message.payloadEncoding = 0;
                            break;
                        }
                        if (object.jsonPayload != null)
                            message.jsonPayload = String(object.jsonPayload);
                        return message;
                    };

                    /**
                     * Creates a plain object from an InsertOrReplaceResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof com.mapr.maprdb.grpc.InsertOrReplaceResponse
                     * @static
                     * @param {com.mapr.maprdb.grpc.InsertOrReplaceResponse} message InsertOrReplaceResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    InsertOrReplaceResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.error = null;
                            object.payloadEncoding = options.enums === String ? "JSON_ENCODING" : 0;
                            object.jsonPayload = "";
                        }
                        if (message.error != null && message.hasOwnProperty("error"))
                            object.error = $root.com.mapr.maprdb.grpc.RpcError.toObject(message.error, options);
                        if (message.payloadEncoding != null && message.hasOwnProperty("payloadEncoding"))
                            object.payloadEncoding = options.enums === String ? $root.com.mapr.maprdb.grpc.PayloadEncoding[message.payloadEncoding] : message.payloadEncoding;
                        if (message.jsonPayload != null && message.hasOwnProperty("jsonPayload"))
                            object.jsonPayload = message.jsonPayload;
                        return object;
                    };

                    /**
                     * Converts this InsertOrReplaceResponse to JSON.
                     * @function toJSON
                     * @memberof com.mapr.maprdb.grpc.InsertOrReplaceResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    InsertOrReplaceResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return InsertOrReplaceResponse;
                })();

                grpc.CreateTableRequest = (function() {

                    /**
                     * Properties of a CreateTableRequest.
                     * @memberof com.mapr.maprdb.grpc
                     * @interface ICreateTableRequest
                     * @property {string|null} [tablePath] CreateTableRequest tablePath
                     */

                    /**
                     * Constructs a new CreateTableRequest.
                     * @memberof com.mapr.maprdb.grpc
                     * @classdesc Represents a CreateTableRequest.
                     * @implements ICreateTableRequest
                     * @constructor
                     * @param {com.mapr.maprdb.grpc.ICreateTableRequest=} [properties] Properties to set
                     */
                    function CreateTableRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * CreateTableRequest tablePath.
                     * @member {string} tablePath
                     * @memberof com.mapr.maprdb.grpc.CreateTableRequest
                     * @instance
                     */
                    CreateTableRequest.prototype.tablePath = "";

                    /**
                     * Creates a new CreateTableRequest instance using the specified properties.
                     * @function create
                     * @memberof com.mapr.maprdb.grpc.CreateTableRequest
                     * @static
                     * @param {com.mapr.maprdb.grpc.ICreateTableRequest=} [properties] Properties to set
                     * @returns {com.mapr.maprdb.grpc.CreateTableRequest} CreateTableRequest instance
                     */
                    CreateTableRequest.create = function create(properties) {
                        return new CreateTableRequest(properties);
                    };

                    /**
                     * Encodes the specified CreateTableRequest message. Does not implicitly {@link com.mapr.maprdb.grpc.CreateTableRequest.verify|verify} messages.
                     * @function encode
                     * @memberof com.mapr.maprdb.grpc.CreateTableRequest
                     * @static
                     * @param {com.mapr.maprdb.grpc.ICreateTableRequest} message CreateTableRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CreateTableRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.tablePath != null && message.hasOwnProperty("tablePath"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.tablePath);
                        return writer;
                    };

                    /**
                     * Encodes the specified CreateTableRequest message, length delimited. Does not implicitly {@link com.mapr.maprdb.grpc.CreateTableRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof com.mapr.maprdb.grpc.CreateTableRequest
                     * @static
                     * @param {com.mapr.maprdb.grpc.ICreateTableRequest} message CreateTableRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CreateTableRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a CreateTableRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof com.mapr.maprdb.grpc.CreateTableRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {com.mapr.maprdb.grpc.CreateTableRequest} CreateTableRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CreateTableRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.mapr.maprdb.grpc.CreateTableRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.tablePath = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a CreateTableRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof com.mapr.maprdb.grpc.CreateTableRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {com.mapr.maprdb.grpc.CreateTableRequest} CreateTableRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CreateTableRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a CreateTableRequest message.
                     * @function verify
                     * @memberof com.mapr.maprdb.grpc.CreateTableRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    CreateTableRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.tablePath != null && message.hasOwnProperty("tablePath"))
                            if (!$util.isString(message.tablePath))
                                return "tablePath: string expected";
                        return null;
                    };

                    /**
                     * Creates a CreateTableRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof com.mapr.maprdb.grpc.CreateTableRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {com.mapr.maprdb.grpc.CreateTableRequest} CreateTableRequest
                     */
                    CreateTableRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.com.mapr.maprdb.grpc.CreateTableRequest)
                            return object;
                        var message = new $root.com.mapr.maprdb.grpc.CreateTableRequest();
                        if (object.tablePath != null)
                            message.tablePath = String(object.tablePath);
                        return message;
                    };

                    /**
                     * Creates a plain object from a CreateTableRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof com.mapr.maprdb.grpc.CreateTableRequest
                     * @static
                     * @param {com.mapr.maprdb.grpc.CreateTableRequest} message CreateTableRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    CreateTableRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.tablePath = "";
                        if (message.tablePath != null && message.hasOwnProperty("tablePath"))
                            object.tablePath = message.tablePath;
                        return object;
                    };

                    /**
                     * Converts this CreateTableRequest to JSON.
                     * @function toJSON
                     * @memberof com.mapr.maprdb.grpc.CreateTableRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    CreateTableRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return CreateTableRequest;
                })();

                grpc.CreateTableResponse = (function() {

                    /**
                     * Properties of a CreateTableResponse.
                     * @memberof com.mapr.maprdb.grpc
                     * @interface ICreateTableResponse
                     * @property {com.mapr.maprdb.grpc.IRpcError|null} [error] CreateTableResponse error
                     */

                    /**
                     * Constructs a new CreateTableResponse.
                     * @memberof com.mapr.maprdb.grpc
                     * @classdesc Represents a CreateTableResponse.
                     * @implements ICreateTableResponse
                     * @constructor
                     * @param {com.mapr.maprdb.grpc.ICreateTableResponse=} [properties] Properties to set
                     */
                    function CreateTableResponse(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * CreateTableResponse error.
                     * @member {com.mapr.maprdb.grpc.IRpcError|null|undefined} error
                     * @memberof com.mapr.maprdb.grpc.CreateTableResponse
                     * @instance
                     */
                    CreateTableResponse.prototype.error = null;

                    /**
                     * Creates a new CreateTableResponse instance using the specified properties.
                     * @function create
                     * @memberof com.mapr.maprdb.grpc.CreateTableResponse
                     * @static
                     * @param {com.mapr.maprdb.grpc.ICreateTableResponse=} [properties] Properties to set
                     * @returns {com.mapr.maprdb.grpc.CreateTableResponse} CreateTableResponse instance
                     */
                    CreateTableResponse.create = function create(properties) {
                        return new CreateTableResponse(properties);
                    };

                    /**
                     * Encodes the specified CreateTableResponse message. Does not implicitly {@link com.mapr.maprdb.grpc.CreateTableResponse.verify|verify} messages.
                     * @function encode
                     * @memberof com.mapr.maprdb.grpc.CreateTableResponse
                     * @static
                     * @param {com.mapr.maprdb.grpc.ICreateTableResponse} message CreateTableResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CreateTableResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.error != null && message.hasOwnProperty("error"))
                            $root.com.mapr.maprdb.grpc.RpcError.encode(message.error, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified CreateTableResponse message, length delimited. Does not implicitly {@link com.mapr.maprdb.grpc.CreateTableResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof com.mapr.maprdb.grpc.CreateTableResponse
                     * @static
                     * @param {com.mapr.maprdb.grpc.ICreateTableResponse} message CreateTableResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CreateTableResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a CreateTableResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof com.mapr.maprdb.grpc.CreateTableResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {com.mapr.maprdb.grpc.CreateTableResponse} CreateTableResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CreateTableResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.mapr.maprdb.grpc.CreateTableResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.error = $root.com.mapr.maprdb.grpc.RpcError.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a CreateTableResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof com.mapr.maprdb.grpc.CreateTableResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {com.mapr.maprdb.grpc.CreateTableResponse} CreateTableResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CreateTableResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a CreateTableResponse message.
                     * @function verify
                     * @memberof com.mapr.maprdb.grpc.CreateTableResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    CreateTableResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.error != null && message.hasOwnProperty("error")) {
                            var error = $root.com.mapr.maprdb.grpc.RpcError.verify(message.error);
                            if (error)
                                return "error." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a CreateTableResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof com.mapr.maprdb.grpc.CreateTableResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {com.mapr.maprdb.grpc.CreateTableResponse} CreateTableResponse
                     */
                    CreateTableResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.com.mapr.maprdb.grpc.CreateTableResponse)
                            return object;
                        var message = new $root.com.mapr.maprdb.grpc.CreateTableResponse();
                        if (object.error != null) {
                            if (typeof object.error !== "object")
                                throw TypeError(".com.mapr.maprdb.grpc.CreateTableResponse.error: object expected");
                            message.error = $root.com.mapr.maprdb.grpc.RpcError.fromObject(object.error);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a CreateTableResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof com.mapr.maprdb.grpc.CreateTableResponse
                     * @static
                     * @param {com.mapr.maprdb.grpc.CreateTableResponse} message CreateTableResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    CreateTableResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.error = null;
                        if (message.error != null && message.hasOwnProperty("error"))
                            object.error = $root.com.mapr.maprdb.grpc.RpcError.toObject(message.error, options);
                        return object;
                    };

                    /**
                     * Converts this CreateTableResponse to JSON.
                     * @function toJSON
                     * @memberof com.mapr.maprdb.grpc.CreateTableResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    CreateTableResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return CreateTableResponse;
                })();

                grpc.DeleteTableRequest = (function() {

                    /**
                     * Properties of a DeleteTableRequest.
                     * @memberof com.mapr.maprdb.grpc
                     * @interface IDeleteTableRequest
                     * @property {string|null} [tablePath] DeleteTableRequest tablePath
                     */

                    /**
                     * Constructs a new DeleteTableRequest.
                     * @memberof com.mapr.maprdb.grpc
                     * @classdesc Represents a DeleteTableRequest.
                     * @implements IDeleteTableRequest
                     * @constructor
                     * @param {com.mapr.maprdb.grpc.IDeleteTableRequest=} [properties] Properties to set
                     */
                    function DeleteTableRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * DeleteTableRequest tablePath.
                     * @member {string} tablePath
                     * @memberof com.mapr.maprdb.grpc.DeleteTableRequest
                     * @instance
                     */
                    DeleteTableRequest.prototype.tablePath = "";

                    /**
                     * Creates a new DeleteTableRequest instance using the specified properties.
                     * @function create
                     * @memberof com.mapr.maprdb.grpc.DeleteTableRequest
                     * @static
                     * @param {com.mapr.maprdb.grpc.IDeleteTableRequest=} [properties] Properties to set
                     * @returns {com.mapr.maprdb.grpc.DeleteTableRequest} DeleteTableRequest instance
                     */
                    DeleteTableRequest.create = function create(properties) {
                        return new DeleteTableRequest(properties);
                    };

                    /**
                     * Encodes the specified DeleteTableRequest message. Does not implicitly {@link com.mapr.maprdb.grpc.DeleteTableRequest.verify|verify} messages.
                     * @function encode
                     * @memberof com.mapr.maprdb.grpc.DeleteTableRequest
                     * @static
                     * @param {com.mapr.maprdb.grpc.IDeleteTableRequest} message DeleteTableRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DeleteTableRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.tablePath != null && message.hasOwnProperty("tablePath"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.tablePath);
                        return writer;
                    };

                    /**
                     * Encodes the specified DeleteTableRequest message, length delimited. Does not implicitly {@link com.mapr.maprdb.grpc.DeleteTableRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof com.mapr.maprdb.grpc.DeleteTableRequest
                     * @static
                     * @param {com.mapr.maprdb.grpc.IDeleteTableRequest} message DeleteTableRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DeleteTableRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a DeleteTableRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof com.mapr.maprdb.grpc.DeleteTableRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {com.mapr.maprdb.grpc.DeleteTableRequest} DeleteTableRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DeleteTableRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.mapr.maprdb.grpc.DeleteTableRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.tablePath = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a DeleteTableRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof com.mapr.maprdb.grpc.DeleteTableRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {com.mapr.maprdb.grpc.DeleteTableRequest} DeleteTableRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DeleteTableRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a DeleteTableRequest message.
                     * @function verify
                     * @memberof com.mapr.maprdb.grpc.DeleteTableRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    DeleteTableRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.tablePath != null && message.hasOwnProperty("tablePath"))
                            if (!$util.isString(message.tablePath))
                                return "tablePath: string expected";
                        return null;
                    };

                    /**
                     * Creates a DeleteTableRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof com.mapr.maprdb.grpc.DeleteTableRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {com.mapr.maprdb.grpc.DeleteTableRequest} DeleteTableRequest
                     */
                    DeleteTableRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.com.mapr.maprdb.grpc.DeleteTableRequest)
                            return object;
                        var message = new $root.com.mapr.maprdb.grpc.DeleteTableRequest();
                        if (object.tablePath != null)
                            message.tablePath = String(object.tablePath);
                        return message;
                    };

                    /**
                     * Creates a plain object from a DeleteTableRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof com.mapr.maprdb.grpc.DeleteTableRequest
                     * @static
                     * @param {com.mapr.maprdb.grpc.DeleteTableRequest} message DeleteTableRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    DeleteTableRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.tablePath = "";
                        if (message.tablePath != null && message.hasOwnProperty("tablePath"))
                            object.tablePath = message.tablePath;
                        return object;
                    };

                    /**
                     * Converts this DeleteTableRequest to JSON.
                     * @function toJSON
                     * @memberof com.mapr.maprdb.grpc.DeleteTableRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    DeleteTableRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return DeleteTableRequest;
                })();

                grpc.DeleteTableResponse = (function() {

                    /**
                     * Properties of a DeleteTableResponse.
                     * @memberof com.mapr.maprdb.grpc
                     * @interface IDeleteTableResponse
                     * @property {com.mapr.maprdb.grpc.IRpcError|null} [error] DeleteTableResponse error
                     */

                    /**
                     * Constructs a new DeleteTableResponse.
                     * @memberof com.mapr.maprdb.grpc
                     * @classdesc Represents a DeleteTableResponse.
                     * @implements IDeleteTableResponse
                     * @constructor
                     * @param {com.mapr.maprdb.grpc.IDeleteTableResponse=} [properties] Properties to set
                     */
                    function DeleteTableResponse(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * DeleteTableResponse error.
                     * @member {com.mapr.maprdb.grpc.IRpcError|null|undefined} error
                     * @memberof com.mapr.maprdb.grpc.DeleteTableResponse
                     * @instance
                     */
                    DeleteTableResponse.prototype.error = null;

                    /**
                     * Creates a new DeleteTableResponse instance using the specified properties.
                     * @function create
                     * @memberof com.mapr.maprdb.grpc.DeleteTableResponse
                     * @static
                     * @param {com.mapr.maprdb.grpc.IDeleteTableResponse=} [properties] Properties to set
                     * @returns {com.mapr.maprdb.grpc.DeleteTableResponse} DeleteTableResponse instance
                     */
                    DeleteTableResponse.create = function create(properties) {
                        return new DeleteTableResponse(properties);
                    };

                    /**
                     * Encodes the specified DeleteTableResponse message. Does not implicitly {@link com.mapr.maprdb.grpc.DeleteTableResponse.verify|verify} messages.
                     * @function encode
                     * @memberof com.mapr.maprdb.grpc.DeleteTableResponse
                     * @static
                     * @param {com.mapr.maprdb.grpc.IDeleteTableResponse} message DeleteTableResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DeleteTableResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.error != null && message.hasOwnProperty("error"))
                            $root.com.mapr.maprdb.grpc.RpcError.encode(message.error, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified DeleteTableResponse message, length delimited. Does not implicitly {@link com.mapr.maprdb.grpc.DeleteTableResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof com.mapr.maprdb.grpc.DeleteTableResponse
                     * @static
                     * @param {com.mapr.maprdb.grpc.IDeleteTableResponse} message DeleteTableResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DeleteTableResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a DeleteTableResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof com.mapr.maprdb.grpc.DeleteTableResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {com.mapr.maprdb.grpc.DeleteTableResponse} DeleteTableResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DeleteTableResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.mapr.maprdb.grpc.DeleteTableResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.error = $root.com.mapr.maprdb.grpc.RpcError.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a DeleteTableResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof com.mapr.maprdb.grpc.DeleteTableResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {com.mapr.maprdb.grpc.DeleteTableResponse} DeleteTableResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DeleteTableResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a DeleteTableResponse message.
                     * @function verify
                     * @memberof com.mapr.maprdb.grpc.DeleteTableResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    DeleteTableResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.error != null && message.hasOwnProperty("error")) {
                            var error = $root.com.mapr.maprdb.grpc.RpcError.verify(message.error);
                            if (error)
                                return "error." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a DeleteTableResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof com.mapr.maprdb.grpc.DeleteTableResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {com.mapr.maprdb.grpc.DeleteTableResponse} DeleteTableResponse
                     */
                    DeleteTableResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.com.mapr.maprdb.grpc.DeleteTableResponse)
                            return object;
                        var message = new $root.com.mapr.maprdb.grpc.DeleteTableResponse();
                        if (object.error != null) {
                            if (typeof object.error !== "object")
                                throw TypeError(".com.mapr.maprdb.grpc.DeleteTableResponse.error: object expected");
                            message.error = $root.com.mapr.maprdb.grpc.RpcError.fromObject(object.error);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a DeleteTableResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof com.mapr.maprdb.grpc.DeleteTableResponse
                     * @static
                     * @param {com.mapr.maprdb.grpc.DeleteTableResponse} message DeleteTableResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    DeleteTableResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.error = null;
                        if (message.error != null && message.hasOwnProperty("error"))
                            object.error = $root.com.mapr.maprdb.grpc.RpcError.toObject(message.error, options);
                        return object;
                    };

                    /**
                     * Converts this DeleteTableResponse to JSON.
                     * @function toJSON
                     * @memberof com.mapr.maprdb.grpc.DeleteTableResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    DeleteTableResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return DeleteTableResponse;
                })();

                grpc.TableExistsRequest = (function() {

                    /**
                     * Properties of a TableExistsRequest.
                     * @memberof com.mapr.maprdb.grpc
                     * @interface ITableExistsRequest
                     * @property {string|null} [tablePath] TableExistsRequest tablePath
                     */

                    /**
                     * Constructs a new TableExistsRequest.
                     * @memberof com.mapr.maprdb.grpc
                     * @classdesc Represents a TableExistsRequest.
                     * @implements ITableExistsRequest
                     * @constructor
                     * @param {com.mapr.maprdb.grpc.ITableExistsRequest=} [properties] Properties to set
                     */
                    function TableExistsRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * TableExistsRequest tablePath.
                     * @member {string} tablePath
                     * @memberof com.mapr.maprdb.grpc.TableExistsRequest
                     * @instance
                     */
                    TableExistsRequest.prototype.tablePath = "";

                    /**
                     * Creates a new TableExistsRequest instance using the specified properties.
                     * @function create
                     * @memberof com.mapr.maprdb.grpc.TableExistsRequest
                     * @static
                     * @param {com.mapr.maprdb.grpc.ITableExistsRequest=} [properties] Properties to set
                     * @returns {com.mapr.maprdb.grpc.TableExistsRequest} TableExistsRequest instance
                     */
                    TableExistsRequest.create = function create(properties) {
                        return new TableExistsRequest(properties);
                    };

                    /**
                     * Encodes the specified TableExistsRequest message. Does not implicitly {@link com.mapr.maprdb.grpc.TableExistsRequest.verify|verify} messages.
                     * @function encode
                     * @memberof com.mapr.maprdb.grpc.TableExistsRequest
                     * @static
                     * @param {com.mapr.maprdb.grpc.ITableExistsRequest} message TableExistsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TableExistsRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.tablePath != null && message.hasOwnProperty("tablePath"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.tablePath);
                        return writer;
                    };

                    /**
                     * Encodes the specified TableExistsRequest message, length delimited. Does not implicitly {@link com.mapr.maprdb.grpc.TableExistsRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof com.mapr.maprdb.grpc.TableExistsRequest
                     * @static
                     * @param {com.mapr.maprdb.grpc.ITableExistsRequest} message TableExistsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TableExistsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a TableExistsRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof com.mapr.maprdb.grpc.TableExistsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {com.mapr.maprdb.grpc.TableExistsRequest} TableExistsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TableExistsRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.mapr.maprdb.grpc.TableExistsRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.tablePath = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a TableExistsRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof com.mapr.maprdb.grpc.TableExistsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {com.mapr.maprdb.grpc.TableExistsRequest} TableExistsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TableExistsRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a TableExistsRequest message.
                     * @function verify
                     * @memberof com.mapr.maprdb.grpc.TableExistsRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    TableExistsRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.tablePath != null && message.hasOwnProperty("tablePath"))
                            if (!$util.isString(message.tablePath))
                                return "tablePath: string expected";
                        return null;
                    };

                    /**
                     * Creates a TableExistsRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof com.mapr.maprdb.grpc.TableExistsRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {com.mapr.maprdb.grpc.TableExistsRequest} TableExistsRequest
                     */
                    TableExistsRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.com.mapr.maprdb.grpc.TableExistsRequest)
                            return object;
                        var message = new $root.com.mapr.maprdb.grpc.TableExistsRequest();
                        if (object.tablePath != null)
                            message.tablePath = String(object.tablePath);
                        return message;
                    };

                    /**
                     * Creates a plain object from a TableExistsRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof com.mapr.maprdb.grpc.TableExistsRequest
                     * @static
                     * @param {com.mapr.maprdb.grpc.TableExistsRequest} message TableExistsRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    TableExistsRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.tablePath = "";
                        if (message.tablePath != null && message.hasOwnProperty("tablePath"))
                            object.tablePath = message.tablePath;
                        return object;
                    };

                    /**
                     * Converts this TableExistsRequest to JSON.
                     * @function toJSON
                     * @memberof com.mapr.maprdb.grpc.TableExistsRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    TableExistsRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return TableExistsRequest;
                })();

                grpc.TableExistsResponse = (function() {

                    /**
                     * Properties of a TableExistsResponse.
                     * @memberof com.mapr.maprdb.grpc
                     * @interface ITableExistsResponse
                     * @property {com.mapr.maprdb.grpc.IRpcError|null} [error] TableExistsResponse error
                     */

                    /**
                     * Constructs a new TableExistsResponse.
                     * @memberof com.mapr.maprdb.grpc
                     * @classdesc Represents a TableExistsResponse.
                     * @implements ITableExistsResponse
                     * @constructor
                     * @param {com.mapr.maprdb.grpc.ITableExistsResponse=} [properties] Properties to set
                     */
                    function TableExistsResponse(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * TableExistsResponse error.
                     * @member {com.mapr.maprdb.grpc.IRpcError|null|undefined} error
                     * @memberof com.mapr.maprdb.grpc.TableExistsResponse
                     * @instance
                     */
                    TableExistsResponse.prototype.error = null;

                    /**
                     * Creates a new TableExistsResponse instance using the specified properties.
                     * @function create
                     * @memberof com.mapr.maprdb.grpc.TableExistsResponse
                     * @static
                     * @param {com.mapr.maprdb.grpc.ITableExistsResponse=} [properties] Properties to set
                     * @returns {com.mapr.maprdb.grpc.TableExistsResponse} TableExistsResponse instance
                     */
                    TableExistsResponse.create = function create(properties) {
                        return new TableExistsResponse(properties);
                    };

                    /**
                     * Encodes the specified TableExistsResponse message. Does not implicitly {@link com.mapr.maprdb.grpc.TableExistsResponse.verify|verify} messages.
                     * @function encode
                     * @memberof com.mapr.maprdb.grpc.TableExistsResponse
                     * @static
                     * @param {com.mapr.maprdb.grpc.ITableExistsResponse} message TableExistsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TableExistsResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.error != null && message.hasOwnProperty("error"))
                            $root.com.mapr.maprdb.grpc.RpcError.encode(message.error, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified TableExistsResponse message, length delimited. Does not implicitly {@link com.mapr.maprdb.grpc.TableExistsResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof com.mapr.maprdb.grpc.TableExistsResponse
                     * @static
                     * @param {com.mapr.maprdb.grpc.ITableExistsResponse} message TableExistsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TableExistsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a TableExistsResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof com.mapr.maprdb.grpc.TableExistsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {com.mapr.maprdb.grpc.TableExistsResponse} TableExistsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TableExistsResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.mapr.maprdb.grpc.TableExistsResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.error = $root.com.mapr.maprdb.grpc.RpcError.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a TableExistsResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof com.mapr.maprdb.grpc.TableExistsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {com.mapr.maprdb.grpc.TableExistsResponse} TableExistsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TableExistsResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a TableExistsResponse message.
                     * @function verify
                     * @memberof com.mapr.maprdb.grpc.TableExistsResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    TableExistsResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.error != null && message.hasOwnProperty("error")) {
                            var error = $root.com.mapr.maprdb.grpc.RpcError.verify(message.error);
                            if (error)
                                return "error." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a TableExistsResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof com.mapr.maprdb.grpc.TableExistsResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {com.mapr.maprdb.grpc.TableExistsResponse} TableExistsResponse
                     */
                    TableExistsResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.com.mapr.maprdb.grpc.TableExistsResponse)
                            return object;
                        var message = new $root.com.mapr.maprdb.grpc.TableExistsResponse();
                        if (object.error != null) {
                            if (typeof object.error !== "object")
                                throw TypeError(".com.mapr.maprdb.grpc.TableExistsResponse.error: object expected");
                            message.error = $root.com.mapr.maprdb.grpc.RpcError.fromObject(object.error);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a TableExistsResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof com.mapr.maprdb.grpc.TableExistsResponse
                     * @static
                     * @param {com.mapr.maprdb.grpc.TableExistsResponse} message TableExistsResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    TableExistsResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.error = null;
                        if (message.error != null && message.hasOwnProperty("error"))
                            object.error = $root.com.mapr.maprdb.grpc.RpcError.toObject(message.error, options);
                        return object;
                    };

                    /**
                     * Converts this TableExistsResponse to JSON.
                     * @function toJSON
                     * @memberof com.mapr.maprdb.grpc.TableExistsResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    TableExistsResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return TableExistsResponse;
                })();

                return grpc;
            })();

            return maprdb;
        })();

        return mapr;
    })();

    return com;
})();

module.exports = $root;
